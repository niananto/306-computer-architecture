
ALU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ca  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000011e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000011e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000150  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000018c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005b1  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000520  00000000  00000000  0000075d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000241  00000000  00000000  00000c7d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000ec0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000031f  00000000  00000000  00000ee4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000007e  00000000  00000000  00001203  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001281  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 63 00 	jmp	0xc6	; 0xc6 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:


int main(void)
{
    /* Replace with your application code */
    	DDRB = 0x00;
  6c:	17 ba       	out	0x17, r1	; 23
	DDRC = 0x00;
  6e:	14 ba       	out	0x14, r1	; 20
	DDRA = 0xFF;
  70:	8f ef       	ldi	r24, 0xFF	; 255
  72:	8a bb       	out	0x1a, r24	; 26

	MCUCSR = (1<<JTD);
  74:	80 e8       	ldi	r24, 0x80	; 128
  76:	84 bf       	out	0x34, r24	; 52
	MCUCSR = (1<<JTD);
  78:	84 bf       	out	0x34, r24	; 52

	while (1)
    {
		unsigned char aluOP = PINC & 63;  //6bit aluop C5 - C0
  7a:	83 b3       	in	r24, 0x13	; 19
  7c:	8f 73       	andi	r24, 0x3F	; 63
		unsigned char input1 = PINB & 15;   //B3 - B0
  7e:	36 b3       	in	r19, 0x16	; 22
  80:	3f 70       	andi	r19, 0x0F	; 15
		unsigned char input2 = (PINB >> 4) & 15; //B7-B4
  82:	26 b3       	in	r18, 0x16	; 22
  84:	22 95       	swap	r18
  86:	2f 70       	andi	r18, 0x0F	; 15

		unsigned char result = input1;
		if(aluOP == ADD_){
  88:	89 31       	cpi	r24, 0x19	; 25
  8a:	19 f4       	brne	.+6      	; 0x92 <main+0x26>
			result = input1 + input2;
  8c:	93 2f       	mov	r25, r19
  8e:	92 0f       	add	r25, r18
  90:	01 c0       	rjmp	.+2      	; 0x94 <main+0x28>
    {
		unsigned char aluOP = PINC & 63;  //6bit aluop C5 - C0
		unsigned char input1 = PINB & 15;   //B3 - B0
		unsigned char input2 = (PINB >> 4) & 15; //B7-B4

		unsigned char result = input1;
  92:	93 2f       	mov	r25, r19
		if(aluOP == ADD_){
			result = input1 + input2;
		}
		if(aluOP == SUB_){
  94:	86 30       	cpi	r24, 0x06	; 6
  96:	11 f4       	brne	.+4      	; 0x9c <main+0x30>
			result = input1 - input2;
  98:	93 2f       	mov	r25, r19
  9a:	92 1b       	sub	r25, r18
		}
		if(aluOP == AND_){
  9c:	8b 32       	cpi	r24, 0x2B	; 43
  9e:	11 f4       	brne	.+4      	; 0xa4 <main+0x38>
			result = input1 & input2;
  a0:	93 2f       	mov	r25, r19
  a2:	92 23       	and	r25, r18
		}
		if(aluOP == OR_){
  a4:	8e 32       	cpi	r24, 0x2E	; 46
  a6:	11 f4       	brne	.+4      	; 0xac <main+0x40>
			result = input1 | input2;
  a8:	93 2f       	mov	r25, r19
  aa:	92 2b       	or	r25, r18
		}
		if(aluOP == NOR_){
  ac:	81 32       	cpi	r24, 0x21	; 33
  ae:	29 f4       	brne	.+10     	; 0xba <main+0x4e>
			result = (~(input1 | input2)) & 15;
  b0:	83 2f       	mov	r24, r19
  b2:	82 2b       	or	r24, r18
  b4:	80 95       	com	r24
  b6:	98 2f       	mov	r25, r24
  b8:	9f 70       	andi	r25, 0x0F	; 15
		}
		result = result & 15;
  ba:	89 2f       	mov	r24, r25
  bc:	8f 70       	andi	r24, 0x0F	; 15

		if(result == 0){
  be:	09 f4       	brne	.+2      	; 0xc2 <main+0x56>
			result |= (1 << 4);
  c0:	80 61       	ori	r24, 0x10	; 16
		}

		PORTA = result;
  c2:	8b bb       	out	0x1b, r24	; 27
	}
  c4:	da cf       	rjmp	.-76     	; 0x7a <main+0xe>

000000c6 <_exit>:
  c6:	f8 94       	cli

000000c8 <__stop_program>:
  c8:	ff cf       	rjmp	.-2      	; 0xc8 <__stop_program>
