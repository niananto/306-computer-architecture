
ALU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000011c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000011c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000014c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000188  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005b1  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000520  00000000  00000000  00000759  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000023b  00000000  00000000  00000c79  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000eb4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000031f  00000000  00000000  00000ed8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000073  00000000  00000000  000011f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000126a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 62 00 	jmp	0xc4	; 0xc4 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:


int main(void)
{
    /* Replace with your application code */
    DDRB = 0x00;
  6c:	17 ba       	out	0x17, r1	; 23
	DDRC = 0x00;
  6e:	14 ba       	out	0x14, r1	; 20
	DDRA = 0xFF;
  70:	8f ef       	ldi	r24, 0xFF	; 255
  72:	8a bb       	out	0x1a, r24	; 26
	
	MCUSR = (1<<JTD);
  74:	80 e8       	ldi	r24, 0x80	; 128
  76:	84 bf       	out	0x34, r24	; 52
	MCUSR = (1<<JTD);
  78:	84 bf       	out	0x34, r24	; 52
	
	while (1) 
    {
		unsigned char aluOP = PINC & 63;
  7a:	83 b3       	in	r24, 0x13	; 19
  7c:	8f 73       	andi	r24, 0x3F	; 63
		unsigned char input1 = PINB & 15;
  7e:	96 b3       	in	r25, 0x16	; 22
  80:	39 2f       	mov	r19, r25
  82:	3f 70       	andi	r19, 0x0F	; 15
		unsigned char input2 = (PINB >> 4) & 15;
  84:	96 b3       	in	r25, 0x16	; 22
  86:	92 95       	swap	r25
  88:	9f 70       	andi	r25, 0x0F	; 15
		
		unsigned char result = input1;
		if(aluOP == ADD_){
  8a:	89 31       	cpi	r24, 0x19	; 25
  8c:	19 f4       	brne	.+6      	; 0x94 <main+0x28>
			result = input1 + input2;
  8e:	23 2f       	mov	r18, r19
  90:	29 0f       	add	r18, r25
  92:	01 c0       	rjmp	.+2      	; 0x96 <main+0x2a>
    {
		unsigned char aluOP = PINC & 63;
		unsigned char input1 = PINB & 15;
		unsigned char input2 = (PINB >> 4) & 15;
		
		unsigned char result = input1;
  94:	23 2f       	mov	r18, r19
		if(aluOP == ADD_){
			result = input1 + input2;
		}
		if(aluOP == SUB_){
  96:	86 30       	cpi	r24, 0x06	; 6
  98:	11 f4       	brne	.+4      	; 0x9e <main+0x32>
			result = input1 - input2;
  9a:	23 2f       	mov	r18, r19
  9c:	29 1b       	sub	r18, r25
		}
		if(aluOP == AND_){
  9e:	8b 32       	cpi	r24, 0x2B	; 43
  a0:	11 f4       	brne	.+4      	; 0xa6 <main+0x3a>
			result = input1 & input2;
  a2:	23 2f       	mov	r18, r19
  a4:	29 23       	and	r18, r25
		}
		if(aluOP == OR_){
  a6:	8e 32       	cpi	r24, 0x2E	; 46
  a8:	11 f4       	brne	.+4      	; 0xae <main+0x42>
			result = input1 | input2;
  aa:	23 2f       	mov	r18, r19
  ac:	29 2b       	or	r18, r25
		}
		if(aluOP == NOR_){
  ae:	81 32       	cpi	r24, 0x21	; 33
  b0:	21 f4       	brne	.+8      	; 0xba <main+0x4e>
			result = (~(input1 | input2)) & 15;
  b2:	93 2b       	or	r25, r19
  b4:	90 95       	com	r25
  b6:	29 2f       	mov	r18, r25
  b8:	2f 70       	andi	r18, 0x0F	; 15
		}
		
		if(result == 0){
  ba:	21 11       	cpse	r18, r1
  bc:	01 c0       	rjmp	.+2      	; 0xc0 <main+0x54>
			result |= (1 << 5);	
  be:	20 62       	ori	r18, 0x20	; 32
		}
		
		PORTA = result;
  c0:	2b bb       	out	0x1b, r18	; 27
	}
  c2:	db cf       	rjmp	.-74     	; 0x7a <main+0xe>

000000c4 <_exit>:
  c4:	f8 94       	cli

000000c6 <__stop_program>:
  c6:	ff cf       	rjmp	.-2      	; 0xc6 <__stop_program>
