
PCJumpBranch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000f2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000146  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000146  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000178  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000068c  00000000  00000000  000001d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000588  00000000  00000000  00000860  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002bc  00000000  00000000  00000de8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000010a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a1  00000000  00000000  000010c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000fa  00000000  00000000  00001469  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001563  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <avr/io.h>
#include <util/delay.h>

int main(void)
{
	DDRB = 0x00;
  6c:	17 ba       	out	0x17, r1	; 23
	DDRA = 0xFF;
  6e:	8f ef       	ldi	r24, 0xFF	; 255
  70:	8a bb       	out	0x1a, r24	; 26
	DDRD = 0x00;
  72:	11 ba       	out	0x11, r1	; 17
	DDRC = 0xFE;
  74:	8e ef       	ldi	r24, 0xFE	; 254
  76:	84 bb       	out	0x14, r24	; 20
	MCUCSR = (1<<JTD);
  78:	80 e8       	ldi	r24, 0x80	; 128
  7a:	84 bf       	out	0x34, r24	; 52
	MCUCSR = (1<<JTD);
  7c:	84 bf       	out	0x34, r24	; 52
	
	unsigned char prev_clk = 0;
	unsigned char pc = 0;
  7e:	f0 e0       	ldi	r31, 0x00	; 0
	DDRD = 0x00;
	DDRC = 0xFE;
	MCUCSR = (1<<JTD);
	MCUCSR = (1<<JTD);
	
	unsigned char prev_clk = 0;
  80:	e0 e0       	ldi	r30, 0x00	; 0
  82:	01 c0       	rjmp	.+2      	; 0x86 <main+0x1a>
  84:	e9 2f       	mov	r30, r25
	unsigned char pc = 0;
    /* Replace with your application code */
    while (1) {
		unsigned char curr_clk = (PIND >> 7) & 1;
  86:	90 b3       	in	r25, 0x10	; 16
  88:	99 1f       	adc	r25, r25
  8a:	99 27       	eor	r25, r25
  8c:	99 1f       	adc	r25, r25
		unsigned char jmpAddress = PINB;
  8e:	76 b3       	in	r23, 0x16	; 22
		char immediate = PIND & 15;
  90:	80 b3       	in	r24, 0x10	; 16
  92:	8f 70       	andi	r24, 0x0F	; 15
		unsigned char jump = (PIND >> 6) & 1;
  94:	20 b3       	in	r18, 0x10	; 16
  96:	26 fb       	bst	r18, 6
  98:	22 27       	eor	r18, r18
  9a:	20 f9       	bld	r18, 0
		unsigned char branch = (PIND >> 5) & 1;
  9c:	30 b3       	in	r19, 0x10	; 16
  9e:	35 fb       	bst	r19, 5
  a0:	33 27       	eor	r19, r19
  a2:	30 f9       	bld	r19, 0
		unsigned char bneq = (PIND >> 4) & 1;
  a4:	40 b3       	in	r20, 0x10	; 16
  a6:	44 fb       	bst	r20, 4
  a8:	55 27       	eor	r21, r21
  aa:	50 f9       	bld	r21, 0
		unsigned char ALUzero = PINC & 1;
  ac:	43 b3       	in	r20, 0x13	; 19
  ae:	41 70       	andi	r20, 0x01	; 1
		if((immediate >> 3) & 1){
  b0:	68 2f       	mov	r22, r24
  b2:	66 95       	lsr	r22
  b4:	66 95       	lsr	r22
  b6:	66 95       	lsr	r22
  b8:	09 f0       	breq	.+2      	; 0xbc <main+0x50>
			immediate |= 0xF0;
  ba:	80 6f       	ori	r24, 0xF0	; 240
		}
		if(curr_clk ==1 && prev_clk==0){
  bc:	91 30       	cpi	r25, 0x01	; 1
  be:	11 f7       	brne	.-60     	; 0x84 <main+0x18>
  c0:	e1 11       	cpse	r30, r1
  c2:	e0 cf       	rjmp	.-64     	; 0x84 <main+0x18>
			pc = pc + 1;
  c4:	61 e0       	ldi	r22, 0x01	; 1
  c6:	6f 0f       	add	r22, r31
			if(branch){
  c8:	33 23       	and	r19, r19
  ca:	11 f0       	breq	.+4      	; 0xd0 <main+0x64>
				if(ALUzero != bneq){
  cc:	54 13       	cpse	r21, r20
					pc = pc + immediate;
  ce:	68 0f       	add	r22, r24
				}
			}
			if(jump){
  d0:	21 11       	cpse	r18, r1
  d2:	01 c0       	rjmp	.+2      	; 0xd6 <main+0x6a>
  d4:	76 2f       	mov	r23, r22
				pc = jmpAddress;
			}
			PORTA = pc;
  d6:	7b bb       	out	0x1b, r23	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d8:	2f e3       	ldi	r18, 0x3F	; 63
  da:	3d e0       	ldi	r19, 0x0D	; 13
  dc:	83 e0       	ldi	r24, 0x03	; 3
  de:	21 50       	subi	r18, 0x01	; 1
  e0:	30 40       	sbci	r19, 0x00	; 0
  e2:	80 40       	sbci	r24, 0x00	; 0
  e4:	e1 f7       	brne	.-8      	; 0xde <main+0x72>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <main+0x7c>
  e8:	00 00       	nop
  ea:	f7 2f       	mov	r31, r23
  ec:	cb cf       	rjmp	.-106    	; 0x84 <main+0x18>

000000ee <_exit>:
  ee:	f8 94       	cli

000000f0 <__stop_program>:
  f0:	ff cf       	rjmp	.-2      	; 0xf0 <__stop_program>
