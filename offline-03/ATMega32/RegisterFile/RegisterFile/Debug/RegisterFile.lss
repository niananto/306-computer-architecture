
RegisterFile.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001c0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000234  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  00800060  00800060  00000234  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000264  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  000002a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000730  00000000  00000000  000002c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005ce  00000000  00000000  000009f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000033b  00000000  00000000  00000fbe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000024  00000000  00000000  000012fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003c6  00000000  00000000  00001320  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000023a  00000000  00000000  000016e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000010  00000000  00000000  00001920  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	aa 36       	cpi	r26, 0x6A	; 106
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:
#include <util/delay.h>
unsigned char registers[10] = {0};

int main(void)
{
	registers[6] = 15;
  7c:	8f e0       	ldi	r24, 0x0F	; 15
  7e:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__DATA_REGION_ORIGIN__+0x6>
	unsigned char ekbar=0;
	DDRB = 0x00;
  82:	17 ba       	out	0x17, r1	; 23
	DDRD = 0x00;
  84:	11 ba       	out	0x11, r1	; 17
	DDRA = 0xFF;
  86:	8f ef       	ldi	r24, 0xFF	; 255
  88:	8a bb       	out	0x1a, r24	; 26
	DDRC = 0b01111000;
  8a:	88 e7       	ldi	r24, 0x78	; 120
  8c:	84 bb       	out	0x14, r24	; 20
	unsigned prev_clk = 0;
	
	MCUCSR = (1<<JTD);
  8e:	80 e8       	ldi	r24, 0x80	; 128
  90:	84 bf       	out	0x34, r24	; 52
	MCUCSR = (1<<JTD);
  92:	84 bf       	out	0x34, r24	; 52
	unsigned char ekbar=0;
	DDRB = 0x00;
	DDRD = 0x00;
	DDRA = 0xFF;
	DDRC = 0b01111000;
	unsigned prev_clk = 0;
  94:	c0 e0       	ldi	r28, 0x00	; 0
  96:	d0 e0       	ldi	r29, 0x00	; 0
unsigned char registers[10] = {0};

int main(void)
{
	registers[6] = 15;
	unsigned char ekbar=0;
  98:	d1 2c       	mov	r13, r1
  9a:	01 c0       	rjmp	.+2      	; 0x9e <main+0x22>
  9c:	ea 01       	movw	r28, r20
	
	MCUCSR = (1<<JTD);
	MCUCSR = (1<<JTD);
    /* Replace with your application code */
    while (1) {
		unsigned readReg1 = PINB & 7;
  9e:	26 b3       	in	r18, 0x16	; 22
  a0:	27 70       	andi	r18, 0x07	; 7
  a2:	30 e0       	ldi	r19, 0x00	; 0
		unsigned readReg2 = (PINB >> 3) & 7;
  a4:	86 b3       	in	r24, 0x16	; 22
  a6:	86 95       	lsr	r24
  a8:	86 95       	lsr	r24
  aa:	86 95       	lsr	r24
  ac:	87 70       	andi	r24, 0x07	; 7
  ae:	90 e0       	ldi	r25, 0x00	; 0
		unsigned writeReg = PIND & 7;
  b0:	60 b3       	in	r22, 0x10	; 16
  b2:	67 70       	andi	r22, 0x07	; 7
  b4:	70 e0       	ldi	r23, 0x00	; 0
		unsigned writeData = (PIND >> 3) & 15;
  b6:	10 b3       	in	r17, 0x10	; 16
  b8:	16 95       	lsr	r17
  ba:	16 95       	lsr	r17
  bc:	16 95       	lsr	r17
  be:	1f 70       	andi	r17, 0x0F	; 15
  c0:	c1 2e       	mov	r12, r17
		unsigned regWrite = (PINB >> 7) & 1;
  c2:	e6 b3       	in	r30, 0x16	; 22
  c4:	ee 1f       	adc	r30, r30
  c6:	ee 27       	eor	r30, r30
  c8:	ee 1f       	adc	r30, r30
  ca:	f0 e0       	ldi	r31, 0x00	; 0
		unsigned clk = (PINB >> 6) & 1;
  cc:	a6 b3       	in	r26, 0x16	; 22
  ce:	a6 fb       	bst	r26, 6
  d0:	44 27       	eor	r20, r20
  d2:	40 f9       	bld	r20, 0
  d4:	50 e0       	ldi	r21, 0x00	; 0
		unsigned showAddress = PINC & 7;
  d6:	a3 b3       	in	r26, 0x13	; 19
  d8:	a7 70       	andi	r26, 0x07	; 7
  da:	ea 2e       	mov	r14, r26
  dc:	f1 2c       	mov	r15, r1
		unsigned memWrite = (PINC >> 7) & 1;
  de:	a3 b3       	in	r26, 0x13	; 19
  e0:	aa 1f       	adc	r26, r26
  e2:	aa 27       	eor	r26, r26
  e4:	aa 1f       	adc	r26, r26
  e6:	8a 2e       	mov	r8, r26
  e8:	91 2c       	mov	r9, r1

		PORTA = (registers[readReg1] & 15) | (registers[readReg2] << 4);
  ea:	89 01       	movw	r16, r18
  ec:	00 5a       	subi	r16, 0xA0	; 160
  ee:	1f 4f       	sbci	r17, 0xFF	; 255
  f0:	d8 01       	movw	r26, r16
  f2:	0c 91       	ld	r16, X
  f4:	80 5a       	subi	r24, 0xA0	; 160
  f6:	9f 4f       	sbci	r25, 0xFF	; 255
  f8:	dc 01       	movw	r26, r24
  fa:	9c 91       	ld	r25, X
  fc:	b0 e1       	ldi	r27, 0x10	; 16
  fe:	9b 9f       	mul	r25, r27
 100:	c0 01       	movw	r24, r0
 102:	11 24       	eor	r1, r1
 104:	90 2f       	mov	r25, r16
 106:	9f 70       	andi	r25, 0x0F	; 15
 108:	89 2b       	or	r24, r25
 10a:	8b bb       	out	0x1b, r24	; 27
		PORTC = (registers[showAddress] << 3);
 10c:	c7 01       	movw	r24, r14
 10e:	80 5a       	subi	r24, 0xA0	; 160
 110:	9f 4f       	sbci	r25, 0xFF	; 255
 112:	dc 01       	movw	r26, r24
 114:	8c 91       	ld	r24, X
 116:	88 0f       	add	r24, r24
 118:	88 0f       	add	r24, r24
 11a:	88 0f       	add	r24, r24
 11c:	85 bb       	out	0x15, r24	; 21
		if(prev_clk==0 && clk==1){
 11e:	20 97       	sbiw	r28, 0x00	; 0
 120:	a9 f4       	brne	.+42     	; 0x14c <main+0xd0>
 122:	41 30       	cpi	r20, 0x01	; 1
 124:	51 05       	cpc	r21, r1
 126:	91 f4       	brne	.+36     	; 0x14c <main+0xd0>
			if(regWrite){
 128:	ef 2b       	or	r30, r31
 12a:	81 f0       	breq	.+32     	; 0x14c <main+0xd0>

				if(writeReg)registers[writeReg] = writeData;
 12c:	61 15       	cp	r22, r1
 12e:	71 05       	cpc	r23, r1
 130:	21 f0       	breq	.+8      	; 0x13a <main+0xbe>
 132:	fb 01       	movw	r30, r22
 134:	e0 5a       	subi	r30, 0xA0	; 160
 136:	ff 4f       	sbci	r31, 0xFF	; 255
 138:	c0 82       	st	Z, r12
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 13a:	bf e3       	ldi	r27, 0x3F	; 63
 13c:	0d e0       	ldi	r16, 0x0D	; 13
 13e:	13 e0       	ldi	r17, 0x03	; 3
 140:	b1 50       	subi	r27, 0x01	; 1
 142:	00 40       	sbci	r16, 0x00	; 0
 144:	10 40       	sbci	r17, 0x00	; 0
 146:	e1 f7       	brne	.-8      	; 0x140 <main+0xc4>
 148:	00 c0       	rjmp	.+0      	; 0x14a <main+0xce>
 14a:	00 00       	nop
				_delay_ms(1000);
			}
		}
		if (clk==0)
 14c:	41 15       	cp	r20, r1
 14e:	51 05       	cpc	r21, r1
 150:	c1 f4       	brne	.+48     	; 0x182 <main+0x106>
 152:	89 e6       	ldi	r24, 0x69	; 105
 154:	98 e1       	ldi	r25, 0x18	; 24
 156:	01 97       	sbiw	r24, 0x01	; 1
 158:	f1 f7       	brne	.-4      	; 0x156 <main+0xda>
 15a:	00 c0       	rjmp	.+0      	; 0x15c <main+0xe0>
 15c:	00 00       	nop
		{
			_delay_ms(25);
			if (clk==0)
 15e:	41 15       	cp	r20, r1
 160:	51 05       	cpc	r21, r1
 162:	79 f4       	brne	.+30     	; 0x182 <main+0x106>
			{
				if(readReg1 == 6 && memWrite == 0 && (ekbar==0)){
 164:	26 30       	cpi	r18, 0x06	; 6
 166:	31 05       	cpc	r19, r1
 168:	61 f4       	brne	.+24     	; 0x182 <main+0x106>
 16a:	81 14       	cp	r8, r1
 16c:	91 04       	cpc	r9, r1
 16e:	49 f4       	brne	.+18     	; 0x182 <main+0x106>
 170:	d1 10       	cpse	r13, r1
 172:	07 c0       	rjmp	.+14     	; 0x182 <main+0x106>
					registers[6]++;
 174:	e0 e6       	ldi	r30, 0x60	; 96
 176:	f0 e0       	ldi	r31, 0x00	; 0
 178:	86 81       	ldd	r24, Z+6	; 0x06
 17a:	8f 5f       	subi	r24, 0xFF	; 255
 17c:	86 83       	std	Z+6, r24	; 0x06
					ekbar=1;
 17e:	dd 24       	eor	r13, r13
 180:	d3 94       	inc	r13
				}
			}
		}
		if (prev_clk==0 && clk==1)
 182:	cd 2b       	or	r28, r29
 184:	09 f0       	breq	.+2      	; 0x188 <main+0x10c>
 186:	8a cf       	rjmp	.-236    	; 0x9c <main+0x20>
 188:	41 30       	cpi	r20, 0x01	; 1
 18a:	51 05       	cpc	r21, r1
 18c:	09 f0       	breq	.+2      	; 0x190 <main+0x114>
 18e:	86 cf       	rjmp	.-244    	; 0x9c <main+0x20>
		{
			
			if(readReg1 == 6 && memWrite == 1){
 190:	26 30       	cpi	r18, 0x06	; 6
 192:	31 05       	cpc	r19, r1
 194:	41 f4       	brne	.+16     	; 0x1a6 <main+0x12a>
 196:	8a 94       	dec	r8
 198:	89 28       	or	r8, r9
 19a:	29 f4       	brne	.+10     	; 0x1a6 <main+0x12a>
				registers[6]--;
 19c:	e0 e6       	ldi	r30, 0x60	; 96
 19e:	f0 e0       	ldi	r31, 0x00	; 0
 1a0:	86 81       	ldd	r24, Z+6	; 0x06
 1a2:	81 50       	subi	r24, 0x01	; 1
 1a4:	86 83       	std	Z+6, r24	; 0x06
 1a6:	af e0       	ldi	r26, 0x0F	; 15
 1a8:	b6 e6       	ldi	r27, 0x66	; 102
 1aa:	02 e0       	ldi	r16, 0x02	; 2
 1ac:	a1 50       	subi	r26, 0x01	; 1
 1ae:	b0 40       	sbci	r27, 0x00	; 0
 1b0:	00 40       	sbci	r16, 0x00	; 0
 1b2:	e1 f7       	brne	.-8      	; 0x1ac <main+0x130>
 1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <main+0x13a>
 1b6:	00 00       	nop
			}
			ekbar=0;
 1b8:	d1 2c       	mov	r13, r1
 1ba:	70 cf       	rjmp	.-288    	; 0x9c <main+0x20>

000001bc <_exit>:
 1bc:	f8 94       	cli

000001be <__stop_program>:
 1be:	ff cf       	rjmp	.-2      	; 0x1be <__stop_program>
