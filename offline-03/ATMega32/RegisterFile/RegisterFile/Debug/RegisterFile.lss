
RegisterFile.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000018c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  00800060  00800060  00000200  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000200  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000230  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  0000026c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006e8  00000000  00000000  0000028c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005ce  00000000  00000000  00000974  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002f8  00000000  00000000  00000f42  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000024  00000000  00000000  0000123c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003c0  00000000  00000000  00001260  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000019f  00000000  00000000  00001620  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000010  00000000  00000000  000017bf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	aa 36       	cpi	r26, 0x6A	; 106
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 c4 00 	jmp	0x188	; 0x188 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:
#include <util/delay.h>
unsigned char registers[10] = {0};

int main(void)
{
	registers[6] = 15;
  7c:	8f e0       	ldi	r24, 0x0F	; 15
  7e:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__DATA_REGION_ORIGIN__+0x6>
	DDRB = 0x00;
  82:	17 ba       	out	0x17, r1	; 23
	DDRD = 0x00;
  84:	11 ba       	out	0x11, r1	; 17
	DDRA = 0xFF;
  86:	8f ef       	ldi	r24, 0xFF	; 255
  88:	8a bb       	out	0x1a, r24	; 26
	DDRC = 0b01111000;
  8a:	88 e7       	ldi	r24, 0x78	; 120
  8c:	84 bb       	out	0x14, r24	; 20
	unsigned prev_clk = 0;
	
	MCUSR = (1<<JTD);
  8e:	80 e8       	ldi	r24, 0x80	; 128
  90:	84 bf       	out	0x34, r24	; 52
	MCUSR = (1<<JTD);
  92:	84 bf       	out	0x34, r24	; 52
	registers[6] = 15;
	DDRB = 0x00;
	DDRD = 0x00;
	DDRA = 0xFF;
	DDRC = 0b01111000;
	unsigned prev_clk = 0;
  94:	c0 e0       	ldi	r28, 0x00	; 0
  96:	d0 e0       	ldi	r29, 0x00	; 0
  98:	01 c0       	rjmp	.+2      	; 0x9c <main+0x20>
  9a:	ed 01       	movw	r28, r26
	
	MCUSR = (1<<JTD);
	MCUSR = (1<<JTD);
    /* Replace with your application code */
    while (1) {
		unsigned readReg1 = PINB & 7;
  9c:	26 b3       	in	r18, 0x16	; 22
  9e:	27 70       	andi	r18, 0x07	; 7
  a0:	30 e0       	ldi	r19, 0x00	; 0
		unsigned readReg2 = (PINB >> 3) & 7;
  a2:	86 b3       	in	r24, 0x16	; 22
  a4:	86 95       	lsr	r24
  a6:	86 95       	lsr	r24
  a8:	86 95       	lsr	r24
  aa:	87 70       	andi	r24, 0x07	; 7
  ac:	c8 2e       	mov	r12, r24
  ae:	d1 2c       	mov	r13, r1
		unsigned writeReg = PIND & 7;
  b0:	60 b3       	in	r22, 0x10	; 16
  b2:	67 70       	andi	r22, 0x07	; 7
  b4:	70 e0       	ldi	r23, 0x00	; 0
		unsigned writeData = (PIND >> 3) & 15;
  b6:	10 b3       	in	r17, 0x10	; 16
  b8:	16 95       	lsr	r17
  ba:	16 95       	lsr	r17
  bc:	16 95       	lsr	r17
  be:	1f 70       	andi	r17, 0x0F	; 15
		unsigned regWrite = (PINB >> 7) & 1;
  c0:	46 b3       	in	r20, 0x16	; 22
  c2:	44 1f       	adc	r20, r20
  c4:	44 27       	eor	r20, r20
  c6:	44 1f       	adc	r20, r20
  c8:	50 e0       	ldi	r21, 0x00	; 0
		unsigned clk = (PINB >> 6) & 1;
  ca:	86 b3       	in	r24, 0x16	; 22
  cc:	86 fb       	bst	r24, 6
  ce:	aa 27       	eor	r26, r26
  d0:	a0 f9       	bld	r26, 0
  d2:	b0 e0       	ldi	r27, 0x00	; 0
		unsigned showAddress = PINC & 7;
  d4:	83 b3       	in	r24, 0x13	; 19
  d6:	87 70       	andi	r24, 0x07	; 7
  d8:	e8 2e       	mov	r14, r24
  da:	f1 2c       	mov	r15, r1
		unsigned memWrite = (PINC >> 7) & 1;
  dc:	e3 b3       	in	r30, 0x13	; 19
  de:	ee 1f       	adc	r30, r30
  e0:	ee 27       	eor	r30, r30
  e2:	ee 1f       	adc	r30, r30
  e4:	ae 2e       	mov	r10, r30
  e6:	b1 2c       	mov	r11, r1
		PORTA = (registers[readReg1]) | (registers[readReg2] << 4);
  e8:	c9 01       	movw	r24, r18
  ea:	80 5a       	subi	r24, 0xA0	; 160
  ec:	9f 4f       	sbci	r25, 0xFF	; 255
  ee:	fc 01       	movw	r30, r24
  f0:	00 81       	ld	r16, Z
  f2:	c6 01       	movw	r24, r12
  f4:	80 5a       	subi	r24, 0xA0	; 160
  f6:	9f 4f       	sbci	r25, 0xFF	; 255
  f8:	fc 01       	movw	r30, r24
  fa:	90 81       	ld	r25, Z
  fc:	f0 e1       	ldi	r31, 0x10	; 16
  fe:	9f 9f       	mul	r25, r31
 100:	c0 01       	movw	r24, r0
 102:	11 24       	eor	r1, r1
 104:	80 2b       	or	r24, r16
 106:	8b bb       	out	0x1b, r24	; 27
		PORTC = (registers[showAddress] << 3);
 108:	c7 01       	movw	r24, r14
 10a:	80 5a       	subi	r24, 0xA0	; 160
 10c:	9f 4f       	sbci	r25, 0xFF	; 255
 10e:	fc 01       	movw	r30, r24
 110:	80 81       	ld	r24, Z
 112:	88 0f       	add	r24, r24
 114:	88 0f       	add	r24, r24
 116:	88 0f       	add	r24, r24
 118:	85 bb       	out	0x15, r24	; 21
		if(prev_clk==0 && clk==1){
 11a:	20 97       	sbiw	r28, 0x00	; 0
 11c:	91 f4       	brne	.+36     	; 0x142 <main+0xc6>
 11e:	a1 30       	cpi	r26, 0x01	; 1
 120:	b1 05       	cpc	r27, r1
 122:	79 f4       	brne	.+30     	; 0x142 <main+0xc6>
			if(regWrite){
 124:	45 2b       	or	r20, r21
 126:	69 f0       	breq	.+26     	; 0x142 <main+0xc6>
				registers[writeReg] = writeData;
 128:	60 5a       	subi	r22, 0xA0	; 160
 12a:	7f 4f       	sbci	r23, 0xFF	; 255
 12c:	fb 01       	movw	r30, r22
 12e:	10 83       	st	Z, r17
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 130:	ff e3       	ldi	r31, 0x3F	; 63
 132:	4d e0       	ldi	r20, 0x0D	; 13
 134:	83 e0       	ldi	r24, 0x03	; 3
 136:	f1 50       	subi	r31, 0x01	; 1
 138:	40 40       	sbci	r20, 0x00	; 0
 13a:	80 40       	sbci	r24, 0x00	; 0
 13c:	e1 f7       	brne	.-8      	; 0x136 <main+0xba>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <main+0xc4>
 140:	00 00       	nop
				_delay_ms(1000);
			}
		}
		if (prev_clk==1 && clk==0)
 142:	21 97       	sbiw	r28, 0x01	; 1
 144:	09 f0       	breq	.+2      	; 0x148 <main+0xcc>
 146:	a9 cf       	rjmp	.-174    	; 0x9a <main+0x1e>
 148:	10 97       	sbiw	r26, 0x00	; 0
 14a:	09 f0       	breq	.+2      	; 0x14e <main+0xd2>
 14c:	a6 cf       	rjmp	.-180    	; 0x9a <main+0x1e>
		{
			if(readReg1 == 6 && memWrite == 0){
 14e:	26 30       	cpi	r18, 0x06	; 6
 150:	31 05       	cpc	r19, r1
 152:	41 f4       	brne	.+16     	; 0x164 <main+0xe8>
 154:	a1 14       	cp	r10, r1
 156:	b1 04       	cpc	r11, r1
 158:	29 f4       	brne	.+10     	; 0x164 <main+0xe8>
				registers[6]--;
 15a:	c0 e6       	ldi	r28, 0x60	; 96
 15c:	d0 e0       	ldi	r29, 0x00	; 0
 15e:	8e 81       	ldd	r24, Y+6	; 0x06
 160:	81 50       	subi	r24, 0x01	; 1
 162:	8e 83       	std	Y+6, r24	; 0x06
			}
			if(readReg1 == 6 && memWrite == 1){
 164:	26 30       	cpi	r18, 0x06	; 6
 166:	31 05       	cpc	r19, r1
 168:	41 f4       	brne	.+16     	; 0x17a <main+0xfe>
 16a:	aa 94       	dec	r10
 16c:	ab 28       	or	r10, r11
 16e:	29 f4       	brne	.+10     	; 0x17a <main+0xfe>
				registers[6]++;
 170:	e0 e6       	ldi	r30, 0x60	; 96
 172:	f0 e0       	ldi	r31, 0x00	; 0
 174:	86 81       	ldd	r24, Z+6	; 0x06
 176:	8f 5f       	subi	r24, 0xFF	; 255
 178:	86 83       	std	Z+6, r24	; 0x06
 17a:	e9 e8       	ldi	r30, 0x89	; 137
 17c:	f3 ee       	ldi	r31, 0xE3	; 227
 17e:	31 97       	sbiw	r30, 0x01	; 1
 180:	f1 f7       	brne	.-4      	; 0x17e <main+0x102>
 182:	00 c0       	rjmp	.+0      	; 0x184 <main+0x108>
 184:	00 00       	nop
 186:	89 cf       	rjmp	.-238    	; 0x9a <main+0x1e>

00000188 <_exit>:
 188:	f8 94       	cli

0000018a <__stop_program>:
 18a:	ff cf       	rjmp	.-2      	; 0x18a <__stop_program>
